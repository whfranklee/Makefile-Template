// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WiFiServices.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WiFiServices_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WiFiServices_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WiFiServices_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WiFiServices_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WiFiServices_2eproto;
class wifi_services_v1;
struct wifi_services_v1DefaultTypeInternal;
extern wifi_services_v1DefaultTypeInternal _wifi_services_v1_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::wifi_services_v1* Arena::CreateMaybeMessage<::wifi_services_v1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class wifi_services_v1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wifi_services_v1) */ {
 public:
  inline wifi_services_v1() : wifi_services_v1(nullptr) {}
  ~wifi_services_v1() override;
  explicit constexpr wifi_services_v1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  wifi_services_v1(const wifi_services_v1& from);
  wifi_services_v1(wifi_services_v1&& from) noexcept
    : wifi_services_v1() {
    *this = ::std::move(from);
  }

  inline wifi_services_v1& operator=(const wifi_services_v1& from) {
    CopyFrom(from);
    return *this;
  }
  inline wifi_services_v1& operator=(wifi_services_v1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const wifi_services_v1& default_instance() {
    return *internal_default_instance();
  }
  static inline const wifi_services_v1* internal_default_instance() {
    return reinterpret_cast<const wifi_services_v1*>(
               &_wifi_services_v1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(wifi_services_v1& a, wifi_services_v1& b) {
    a.Swap(&b);
  }
  inline void Swap(wifi_services_v1* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(wifi_services_v1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline wifi_services_v1* New() const final {
    return new wifi_services_v1();
  }

  wifi_services_v1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<wifi_services_v1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const wifi_services_v1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const wifi_services_v1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(wifi_services_v1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wifi_services_v1";
  }
  protected:
  explicit wifi_services_v1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
  };
  // repeated string services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  const std::string& services(int index) const;
  std::string* mutable_services(int index);
  void set_services(int index, const std::string& value);
  void set_services(int index, std::string&& value);
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  std::string* add_services();
  void add_services(const std::string& value);
  void add_services(std::string&& value);
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& services() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_services();
  private:
  const std::string& _internal_services(int index) const;
  std::string* _internal_add_services();
  public:

  // @@protoc_insertion_point(class_scope:wifi_services_v1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> services_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WiFiServices_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// wifi_services_v1

// repeated string services = 1;
inline int wifi_services_v1::_internal_services_size() const {
  return services_.size();
}
inline int wifi_services_v1::services_size() const {
  return _internal_services_size();
}
inline void wifi_services_v1::clear_services() {
  services_.Clear();
}
inline std::string* wifi_services_v1::add_services() {
  std::string* _s = _internal_add_services();
  // @@protoc_insertion_point(field_add_mutable:wifi_services_v1.services)
  return _s;
}
inline const std::string& wifi_services_v1::_internal_services(int index) const {
  return services_.Get(index);
}
inline const std::string& wifi_services_v1::services(int index) const {
  // @@protoc_insertion_point(field_get:wifi_services_v1.services)
  return _internal_services(index);
}
inline std::string* wifi_services_v1::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:wifi_services_v1.services)
  return services_.Mutable(index);
}
inline void wifi_services_v1::set_services(int index, const std::string& value) {
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:wifi_services_v1.services)
}
inline void wifi_services_v1::set_services(int index, std::string&& value) {
  services_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:wifi_services_v1.services)
}
inline void wifi_services_v1::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wifi_services_v1.services)
}
inline void wifi_services_v1::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wifi_services_v1.services)
}
inline std::string* wifi_services_v1::_internal_add_services() {
  return services_.Add();
}
inline void wifi_services_v1::add_services(const std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wifi_services_v1.services)
}
inline void wifi_services_v1::add_services(std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:wifi_services_v1.services)
}
inline void wifi_services_v1::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wifi_services_v1.services)
}
inline void wifi_services_v1::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wifi_services_v1.services)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
wifi_services_v1::services() const {
  // @@protoc_insertion_point(field_list:wifi_services_v1.services)
  return services_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
wifi_services_v1::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:wifi_services_v1.services)
  return &services_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WiFiServices_2eproto
