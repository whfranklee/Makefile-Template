// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AssertLocation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AssertLocation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AssertLocation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AssertLocation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AssertLocation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AssertLocation_2eproto;
class assert_loc_v1;
struct assert_loc_v1DefaultTypeInternal;
extern assert_loc_v1DefaultTypeInternal _assert_loc_v1_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::assert_loc_v1* Arena::CreateMaybeMessage<::assert_loc_v1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class assert_loc_v1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:assert_loc_v1) */ {
 public:
  inline assert_loc_v1() : assert_loc_v1(nullptr) {}
  ~assert_loc_v1() override;
  explicit constexpr assert_loc_v1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  assert_loc_v1(const assert_loc_v1& from);
  assert_loc_v1(assert_loc_v1&& from) noexcept
    : assert_loc_v1() {
    *this = ::std::move(from);
  }

  inline assert_loc_v1& operator=(const assert_loc_v1& from) {
    CopyFrom(from);
    return *this;
  }
  inline assert_loc_v1& operator=(assert_loc_v1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const assert_loc_v1& default_instance() {
    return *internal_default_instance();
  }
  static inline const assert_loc_v1* internal_default_instance() {
    return reinterpret_cast<const assert_loc_v1*>(
               &_assert_loc_v1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(assert_loc_v1& a, assert_loc_v1& b) {
    a.Swap(&b);
  }
  inline void Swap(assert_loc_v1* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(assert_loc_v1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline assert_loc_v1* New() const final {
    return new assert_loc_v1();
  }

  assert_loc_v1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<assert_loc_v1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const assert_loc_v1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const assert_loc_v1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(assert_loc_v1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assert_loc_v1";
  }
  protected:
  explicit assert_loc_v1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 3,
    kPayerFieldNumber = 7,
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kNonceFieldNumber = 4,
    kFeeFieldNumber = 5,
    kAmountFieldNumber = 6,
  };
  // string owner = 3;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string payer = 7;
  void clear_payer();
  const std::string& payer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payer();
  PROTOBUF_MUST_USE_RESULT std::string* release_payer();
  void set_allocated_payer(std::string* payer);
  private:
  const std::string& _internal_payer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payer(const std::string& value);
  std::string* _internal_mutable_payer();
  public:

  // float lat = 1;
  void clear_lat();
  float lat() const;
  void set_lat(float value);
  private:
  float _internal_lat() const;
  void _internal_set_lat(float value);
  public:

  // float lon = 2;
  void clear_lon();
  float lon() const;
  void set_lon(float value);
  private:
  float _internal_lon() const;
  void _internal_set_lon(float value);
  public:

  // uint64 nonce = 4;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fee = 5;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 amount = 6;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:assert_loc_v1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_;
  float lat_;
  float lon_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AssertLocation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// assert_loc_v1

// float lat = 1;
inline void assert_loc_v1::clear_lat() {
  lat_ = 0;
}
inline float assert_loc_v1::_internal_lat() const {
  return lat_;
}
inline float assert_loc_v1::lat() const {
  // @@protoc_insertion_point(field_get:assert_loc_v1.lat)
  return _internal_lat();
}
inline void assert_loc_v1::_internal_set_lat(float value) {
  
  lat_ = value;
}
inline void assert_loc_v1::set_lat(float value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:assert_loc_v1.lat)
}

// float lon = 2;
inline void assert_loc_v1::clear_lon() {
  lon_ = 0;
}
inline float assert_loc_v1::_internal_lon() const {
  return lon_;
}
inline float assert_loc_v1::lon() const {
  // @@protoc_insertion_point(field_get:assert_loc_v1.lon)
  return _internal_lon();
}
inline void assert_loc_v1::_internal_set_lon(float value) {
  
  lon_ = value;
}
inline void assert_loc_v1::set_lon(float value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:assert_loc_v1.lon)
}

// string owner = 3;
inline void assert_loc_v1::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& assert_loc_v1::owner() const {
  // @@protoc_insertion_point(field_get:assert_loc_v1.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void assert_loc_v1::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:assert_loc_v1.owner)
}
inline std::string* assert_loc_v1::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:assert_loc_v1.owner)
  return _s;
}
inline const std::string& assert_loc_v1::_internal_owner() const {
  return owner_.Get();
}
inline void assert_loc_v1::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* assert_loc_v1::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* assert_loc_v1::release_owner() {
  // @@protoc_insertion_point(field_release:assert_loc_v1.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void assert_loc_v1::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:assert_loc_v1.owner)
}

// uint64 nonce = 4;
inline void assert_loc_v1::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assert_loc_v1::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assert_loc_v1::nonce() const {
  // @@protoc_insertion_point(field_get:assert_loc_v1.nonce)
  return _internal_nonce();
}
inline void assert_loc_v1::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void assert_loc_v1::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:assert_loc_v1.nonce)
}

// uint64 fee = 5;
inline void assert_loc_v1::clear_fee() {
  fee_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assert_loc_v1::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assert_loc_v1::fee() const {
  // @@protoc_insertion_point(field_get:assert_loc_v1.fee)
  return _internal_fee();
}
inline void assert_loc_v1::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void assert_loc_v1::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:assert_loc_v1.fee)
}

// uint64 amount = 6;
inline void assert_loc_v1::clear_amount() {
  amount_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assert_loc_v1::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 assert_loc_v1::amount() const {
  // @@protoc_insertion_point(field_get:assert_loc_v1.amount)
  return _internal_amount();
}
inline void assert_loc_v1::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void assert_loc_v1::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:assert_loc_v1.amount)
}

// string payer = 7;
inline void assert_loc_v1::clear_payer() {
  payer_.ClearToEmpty();
}
inline const std::string& assert_loc_v1::payer() const {
  // @@protoc_insertion_point(field_get:assert_loc_v1.payer)
  return _internal_payer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void assert_loc_v1::set_payer(ArgT0&& arg0, ArgT... args) {
 
 payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:assert_loc_v1.payer)
}
inline std::string* assert_loc_v1::mutable_payer() {
  std::string* _s = _internal_mutable_payer();
  // @@protoc_insertion_point(field_mutable:assert_loc_v1.payer)
  return _s;
}
inline const std::string& assert_loc_v1::_internal_payer() const {
  return payer_.Get();
}
inline void assert_loc_v1::_internal_set_payer(const std::string& value) {
  
  payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* assert_loc_v1::_internal_mutable_payer() {
  
  return payer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* assert_loc_v1::release_payer() {
  // @@protoc_insertion_point(field_release:assert_loc_v1.payer)
  return payer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void assert_loc_v1::set_allocated_payer(std::string* payer) {
  if (payer != nullptr) {
    
  } else {
    
  }
  payer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:assert_loc_v1.payer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AssertLocation_2eproto
